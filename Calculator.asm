.MODEL SMALL 
.STACK 100H 
 
.DATA 
 NL EQU 0DH,0AH ;LINE FEED AND CARRIAGE RETURN 
 PROMT DB NL,'Chose any one from the given option using (form 1 to 3)$' 
 PROMT1 DB NL,'ENTER YOUR FIRST NUMBER<>$'
 PROMT2 DB NL,'ENTER YOUR SECOND NUMBER<>$'
 STRING_1 DB '1.ADDITION $' 
 STRING_2 DB NL,'2.SUBSTRACTION$' 
 STRING_3 DB NL,'3.MULTIPLICATION$'
 STRING_4 DB NL,'4.DIVITION$'
 STRING_5 DB NL,'PRESS ENTER FOR EXIT THE PROGRAM$'
 STRING_6 DB NL,'INVALID INPUT PLEASE TRY AGIN$'
 OUTPUT DB NL,'YOUR RESULT IS-> $' 
 SUB1 DB 'QUIOTENT: $'
 SUB2 DB ' REMAINDER: $'
 DEMO DB NL,'YOU HAVE CHOSSEN ADDITION OPERATION$' 
 DEMO1 DB NL,'YOU HAVE CHOSSEN SUBSTRACTON OPERATION$' 
 DEMO2 DB NL,'YOU HAVE CHOSSEN MULTIPLICATION OPERATION$' 
 DEMO3 DB NL,'YOU HAVE CHOSSEN DIVITION OPERATIONE$'
 INPUT DB ? 
 NUMBER1 DB ?
 NUMBER2 DB ? 
 RESULT DB ?
 QUIOTENT DB ?
 REMAINDER DB ?
 
 
.CODE 
 MAIN PROC 
 MOV AX, @DATA ; initialize DS 
 MOV DS, AX 
 
 LEA DX, STRING_1 ; loading and displaying the STRING_1 
 MOV AH, 9 
 INT 21H 
 
 LEA DX, STRING_2 ; loading and displaying the STRING_2 
 INT 21H 
 
 
 LEA DX, STRING_3 ; loading and displaying the STRING-3 
 INT 21H
 
 LEA DX, STRING_4 ; loading and displaying the STRING_4 
 INT 21H 
 
 LEA DX, STRING_5 ; loading and displaying the EXIT CONDITION 
 INT 21H 
 
 LOOPING: 
 LEA DX, PROMT
 MOV AH,9 ; loading and displaying the promt 
 INT 21H 
 MOV AH,1 
 INT 21H ;TAKING INPUT 
 MOV INPUT,AL 
 
 CMP INPUT,0DH 
 JE EXIT ;cheaking exit condition 
 
 CMP INPUT,'1' ;if user Enter any value which is less than 1 then it wiil jumP in invalid 
label
 JL INVALID
 
 CMP INPUT,'4' ;if user enter any value which is geter than 3 than it will also jum in 
invalid label
 JG INVALID 
 
 SUB INPUT,30H ;converting input in digit (input stroed in AL register form of assci value 
or char )
 
 
 CMP INPUT,1
 JE ADDITION ;compareing the input value with 1 if it is than perfoming ADDITION 
OPERATION
 
 CMP INPUT,2 ;comparing the input value with 2 if it is than performin 
SUBSTRACTION OPERATION 
 JE SUBSTRACTION 
 
 CMP INPUT,3 ;comparing the input value with 3 if it is than performing 
MULTIPLICATION OPERATION
 JE MULTIPLICATION 
 
 CMP INPUT,4 ;comparing the input value with 3 if it is than performing DIVITION 
OPRATION 
 JE DIVITION 
 
ADDITION:
 LEA DX, DEMO
 MOV AH,9 ; loading and displaying the promt 
 INT 21H 
 
 LEA DX, PROMT1 ; loading and displaying the promt 
 INT 21H 
 
 MOV AH,1 ;TAKING FIRST INPUT 
 INT 21H
 ;SROTINGIN NUMBER 1
 MOV NUMBER1,AL
 
 LEA DX, PROMT2
 MOV AH,9 ; loading and displaying the promt 
 INT 21H
 
 MOV AH,1 ;TAKING SECOND INPUT
 INT 21H
 
 ADD NUMBER1,AL ;CALCULATING THE SUM 
 
 SUB NUMBER1,48 ;CONVERING TO DIGIT
 
 LEA DX, OUTPUT
 MOV AH,9 ; loading and displaying the promt 
 INT 21H
 
 MOV DL,NUMBER1 ;OUT PUT THE SUM 
 MOV AH,2
 INT 21H
 
 
 JMP LOOPING
SUBSTRACTION:
 LEA DX, DEMO1
 MOV AH,9 ; loading and displaying the promt 
 INT 21H 
 
 
 LEA DX, PROMT1 ; loading and displaying the promt 
 INT 21H 
 
 MOV AH,1 ;TAKING FIRST INPUT
 INT 21H
 
 MOV NUMBER1,AL ;STORING IN NUMBER 1
 
 LEA DX, PROMT2
 MOV AH,9 ; loading and displaying the promt 
 INT 21H
 
 MOV AH,1 ;TAKING SECOND INPUT
 INT 21H
 
 SUB NUMBER1,AL ;CALCULATING DIFFERENCE 
 
 ADD NUMBER1,48 ;CONVERTING IN DIGIT
 
 LEA DX, OUTPUT
 MOV AH,9 ; loading and displaying the promt 
 INT 21H
 
 MOV DL,NUMBER1 ;OUTPUT THE DIFFERENCE
 MOV AH,2
 INT 21H
 
 
 JMP LOOPING
MULTIPLICATION:
 LEA DX, DEMO2
 MOV AH,9 ; loading and displaying the promt 
 INT 21H 
 
 LEA DX,PROMT1 ;LODING STRING FOR FIRST INPUT 
 INT 21H 
 
 MOV AH,1 
 INT 21H ;TAKING FIRST INPUT AND STORING IN NUMBER1
 MOV NUMBER1,AL
 SUB NUMBER1,30H ;CONVERTING NUMBER1 ASCII TO DIGIT
 
 LEA DX,PROMT1
 MOV AH,9 ;LODING STRING FOR SECOND INPUT 
 INT 21H 
 
 MOV AH,1 
 INT 21H 
 MOV NUMBER2,AL ;TAKING SECOND INPUT AND STORING IN NUMBER2
 SUB NUMBER2,30H ;CONVERTING NUMBER2 ASCII TO DIGIT 
 
 MOV AL,NUMBER1
 MUL NUMBER2
 
 MOV RESULT,AL ;MOVING RESULT IN RESULT VARIABLE
 ADD RESULT,30H ; CONVETING DIGIT TO ASSCI 
 
 MOV AH,9 
 LEA DX,OUTPUT
 INT 21H
 
 MOV AH,2
 MOV DL,RESULT
 INT 21H 
 JMP LOOPING
DIVITION:
 LEA DX, DEMO3
 MOV AH,9 ; loading and displaying the promt 
 INT 21H 
 
 LEA DX,PROMT1 ;LODING STRING FOR FIRST INPUT 
 INT 21H 
 
 MOV AH,1 
 INT 21H ;TAKING FIRST INPUT AND STORING IN NUMBER1
 MOV NUMBER1,AL 
 SUB NUMBER1,30H ;CONVERTING NUMBER1 ASCII TO DIGIT
 
 LEA DX,PROMT1
 MOV AH,9 ;LODING STRING FOR SECOND INPUT 
 INT 21H 
 
 MOV AH,1 
 INT 21H 
 MOV NUMBER2,AL ;TAKING SECOND INPUT AND STORING IN NUMBER2
 SUB NUMBER2,30H ;CONVERTING NUMBER2 ASCII TO DIGIT
 
 MOV AL,NUMBER1
 MOV AH,0
 DIV NUMBER2
 
 MOV QUIOTENT,AL
 ADD QUIOTENT,30H ;MOVIND VALUE OF AL IN QUIOTENT VARIABLE
 
 MOV REMAINDER,AH ;MOVIND VALUE OF AH IN REMAINDER VARIABLE
 ADD REMAINDER,30H
 
 LEA DX,OUTPUT ;LODING OUTPUT STRING AND OUTPUT IT 
 MOV AH,9
 INT 21H 
 
 LEA DX,SUB1 ;LODING SUB1 STRING AND OUPUT IT 
 INT 21H 
 
 MOV AH,2
 MOV DL,QUIOTENT ;PRINTING THE VALUE OF QUIOTENT 
 INT 21H
 
 LEA DX,SUB2 ;LOADING SUB2 STRING AND OUTPUT IT
 MOV AH,9
 INT 21H 
 ;PRINTING THE VALUE OF REMAINDER 
 MOV DL,REMAINDER 
 MOV AH,2
 INT 21H 
 ;JUM IN THE MAIN MENU
 JMP LOOPING 
 
INVALID:
 LEA DX,STRING_6
 MOV AH, 09H ;loding and displaing invalid message
 INT 21H
 JMP LOOPING ;jump in main menu
 
 
EXIT: 
 MOV AH, 4CH ; return control to DOS 
 INT 21H 
 MAIN ENDP
 END MAIN
